name: Backend

on:
  push:
  workflow_dispatch:
env:
  PROJECT: nig

jobs:
  backend-tests:
    runs-on: ubuntu-20.04
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: rapydo/actions/install@v1
        with:
          project: ${PROJECT}
          swarm: 1

      - name: Run Pytest
        run: |

          rapydo pull --quiet
          rapydo build
          rapydo add task test_task

          rapydo -e AUTH_LOGIN_BAN_TIME=10 start
          # rabbit and neo4j are both very slow at startup...
          # sleep 60
          sleep 75
          rapydo shell backend 'restapi wait'

          rapydo shell backend "bash nig/scripts/init_hpo.sh"

          rapydo shell backend 'restapi tests --wait --destroy'

          LOGURU_LEVEL=WARNING rapydo list services
          # This should fail if at least one container is in Exit status
          [[ ! $(LOGURU_LEVEL=WARNING rapydo list services | grep -E "Exit|Restarting|Created") ]]

      - name: Coverage
        uses: rapydo/actions/coverage@v1
        with:
          repository: projects/${PROJECT}
          project: ${PROJECT}
          step: backend

      - name: Production mode
        run: |
          rapydo remove
          rm -rf data/graphdata/*
          rapydo --testing --prod init --force
          rapydo password registry --random
          rapydo password rabbit --random
          rapydo pull --quiet
          rapydo ssl --volatile
          rapydo -e AUTH_LOGIN_BAN_TIME=10 start
          # compose:
          # sleep 60
          # swarm:
          # rabbit and neo4j are both very slow at startup...
          sleep 180
          rapydo logs
          rapydo status
          cname=$(docker ps --format '{{.Names}}' | grep proxy)
          docker cp ${cname}:/etc/letsencrypt/local_client.crt .
          docker cp ${cname}:/etc/letsencrypt/local_client.key .
          curl --insecure -X GET --max-time 5 --key local_client.key --cert local_client.crt https://localhost/api/status | grep "Server is alive"
          rapydo logs --tail 20 proxy backend

          LOGURU_LEVEL=WARNING rapydo list services
          # This should fail if at least one container is in Exit status
          # Except for frontend that is expected to be exited in prod mode
          [[ ! $(LOGURU_LEVEL=WARNING rapydo list services | grep -v frontend | grep -E "Exit|Restarting|Created") ]]

      - name: Print Logs
        if: failure()
        run: tail -100 data/logs/backend-server.log

      - name: Print Events
        if: failure()
        run: tail -100 data/logs/security-events.log

      - name: Docker Logs
        if: failure()
        run: |
          rapydo logs
